<ul class="tab tab-block">
  <li class="tab-item">
    <a href="/">Search</a>
  </li>
  <li class="tab-item active">
    <a href="/full">Full Graph (Live)</a>
  </li>
</ul>


<script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.min.js" charset="utf-8"></script>
<script src="/static/js/neo4j-web.min.js" charset="utf-8"></script>
<script src="/static/js/serializer.js" charset="utf-8"></script>
<script>
var node;
var link;
var simulation;
var color;
let createGraph = () => {


var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");

color = d3.scaleOrdinal(d3.schemeCategory20);

simulation = d3.forceSimulation()
    .force("link", d3.forceLink().id(function(d) { return d.id; }))
    .force("charge", d3.forceManyBody())
    .force("center", d3.forceCenter(width / 2, height / 2));

  graph = fullGraphData

  link = svg.append("g")
      .attr("class", "links")
    .selectAll("line")
    .data(graph.links)
    .enter().append("line")
      .attr("stroke-width", function(d) { return Math.sqrt(1); });

  node = svg.append("g")
      .attr("class", "nodes")
    .selectAll("circle")
    .data(graph.nodes)
    .enter().append("circle")
      .attr("r", 5)
      .attr("fill", function(d) { return color(1); })
      .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

  node.append("title")
      .text(function(d) { return d.id; });

  simulation
      .nodes(graph.nodes)
      .on("tick", ticked);

  simulation.force("link")
      .links(graph.links);

  function ticked() {
    link
        .attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node
        .attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
  }


};

function restart() {

  // Apply the general update pattern to the nodes.
  node = node.data(fullGraphData.nodes, function(d) { return d.id;});
  node.exit().remove();
  node = node.enter().append("circle").attr("fill", function(d) { return color(d.id); }).attr("r", 5).merge(node).call(d3.drag()
      .on("start", dragstarted)
      .on("drag", dragged)
      .on("end", dragended));;

  // Apply the general update pattern to the links.
  link = link.data(fullGraphData.links, function(d) { return d.source.id + "-" + d.target.id; });
  link.exit().remove();
  link = link.enter().append("line").merge(link);

  // Update and restart the simulation.
  simulation.nodes(fullGraphData.nodes);
  simulation.force("link").links(fullGraphData.links);
  simulation.alpha(1).restart();
}
function dragstarted(d) {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(d) {
  d.fx = d3.event.x;
  d.fy = d3.event.y;
}

function dragended(d) {
  if (!d3.event.active) simulation.alphaTarget(0);
  d.fx = null;
  d.fy = null;
}
</script>
<script src="/static/js/boltAdapter.js" charset="utf-8"></script>

<script type="text/javascript">
  let fullGraphData = {nodes: [], links: []};
  getAllNodes();
  establishWebSocket();
</script>
<svg width="960" height="600"></svg>
<script src="https://d3js.org/d3.v4.min.js"></script>
